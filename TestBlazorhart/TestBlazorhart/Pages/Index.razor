
@page "/Rankings/{index:int}"

@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Interop
@*@using SearchEngineUI.ChartJsFolder*@


@using TestBlazorhart.Data

@inject ResultService ResultService



<h1>Rankings</h1>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <Chart Config="_lineConfig"></Chart>
        </div>
        <div class="col-md-6">
            @if (linkPositions.Count != 0)
            {
                <TestBlazorhart.Pages.Fragments.CssChartComponent linkCss="linkPositions"></TestBlazorhart.Pages.Fragments.CssChartComponent>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            @if (linkPositions.Count != 0)
            {
                <TestBlazorhart.Pages.Fragments.JsChartComponent linkJs="linkPositions"></TestBlazorhart.Pages.Fragments.JsChartComponent>
            }
        </div>
        <div class="col-md-6">
            @if (linkPositions.Count != 0)
            {
                <TestBlazorhart.Pages.Fragments.WordCountComponent linkWords="linkPositions"></TestBlazorhart.Pages.Fragments.WordCountComponent>
            }
        </div>
    </div>
</div>



<div class="container">
    <div class="row">
        <div class="col-md-6">
            <label>Start date: </label>
            <EditForm Model="@_startDate">
                <InputDate @bind-Value="_startDate.dateTime" class="form-control" />
            </EditForm>
        </div>
        <div class="col-md-6">
            <label>End date: </label>
            <EditForm Model="@_endDate">
                <InputDate @bind-Value="_endDate.dateTime" class="form-control" />
            </EditForm>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <button @onclick="GetDateRange">Get data</button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <br />
            <TestBlazorhart.Pages.Fragments.ExternalLinksComponent index="index"></TestBlazorhart.Pages.Fragments.ExternalLinksComponent>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <br />
            <TestBlazorhart.Pages.Fragments.TextComponent index="index"></TestBlazorhart.Pages.Fragments.TextComponent>
        </div>
    </div>
</div>


    @code
{
        [Parameter] public int index { get; set; }
        private List<DateAndPosition> linkPositions = new List<DateAndPosition>();

        TimeSelected _startDate { get; set; } = new TimeSelected();
        TimeSelected _endDate { get; set; } = new TimeSelected();

        private LineConfig _lineConfig;

        private LineDataset<TimePoint> _lineDataSetPositions;
        private string id = "";

        protected override async Task OnInitializedAsync()
        {
            await initialiseChart();

            await ResultService.GetLinkPositions(index, null, null);
            if (ResultService.linkPositions != null)
            {
                linkPositions = ResultService.linkPositions;
            }

            _lineDataSetPositions = new LineDataset<TimePoint>()
            {
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                Label = "Position",
                Fill = false,
                BorderWidth = 2,
                PointRadius = 2,
                PointBorderWidth = 2,
                SteppedLine = SteppedLine.False,
                LineTension = 0
            };


            _lineDataSetPositions.AddRange(linkPositions
                .Select(p => new TimePoint(p.Date, p.Position)));


            _lineConfig.Data.Datasets.Add(_lineDataSetPositions);

        }

        public async Task GetDateRange()
        {
            var startTime = new DateTime(_startDate.dateTime.Year, _startDate.dateTime.Month, _startDate.dateTime.Day, 0, 0, 0);
            var endTime = new DateTime(_endDate.dateTime.Year, _endDate.dateTime.Month, _endDate.dateTime.Day, 23, 59, 59);

            var dataset = _lineConfig.Data.Datasets;

            _lineConfig.Data.Datasets.Remove(_lineDataSetPositions);
            //await _lineChart.Update();

            await ResultService.GetLinkPositions(index, startTime, endTime);
            if (ResultService.linkPositions != null)
            {
                linkPositions = ResultService.linkPositions;
            }
            //await _lineChart.Update();

            _lineDataSetPositions = new LineDataset<TimePoint>()
            {
                BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
                BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
                Label = "Position",
                Fill = false,
                BorderWidth = 2,
                PointRadius = 2,
                PointBorderWidth = 2,
                SteppedLine = SteppedLine.False,
                LineTension = 0
            };

            _lineDataSetPositions.AddRange(linkPositions
            .Select(p => new TimePoint(p.Date, p.Position)));

            _lineConfig.Data.Datasets.Add(_lineDataSetPositions);
        }

        private async Task initialiseChart()
        {
            _lineConfig = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Website rank"
                    },
                    Legend = new Legend
                    {
                        Display = false
                    },
                    Tooltips = new Tooltips
                    {
                        Mode = InteractionMode.Nearest,
                        Intersect = false
                    },
                    Scales = new Scales
                    {
                        YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                Reverse = true,
                                Min = 1
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Position"
                            }
                        }
                    },
                        XAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "MM.DD.YYYY",
                                //DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                    },
                    Hover = new Hover
                    {
                        Intersect = true,
                        Mode = InteractionMode.Y
                    }
                }
            };

            id = await Task.Run(() => _lineConfig.CanvasId);

        }

        public class TimeSelected
        {
            public DateTime dateTime { get; set; } = DateTime.Now;
        }
    }

    <style>
        button {
            border-radius: 8px;
            border: 2px solid #000000;
            background-color: limegreen;
            margin-top: 10px;
            width: 100%;
        }

            button:hover {
                box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);
            }

        h1 {
            text-align:center;
        }
    </style>


