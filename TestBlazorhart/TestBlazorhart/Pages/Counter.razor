@page "/counter"

@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Common.Axes
<h1>Line chart</h1>


<Chart Config="_config"></Chart>
<Chart Config="_lineConfig"></Chart>

@code {
    private PieConfig _config;
    private LineConfig _lineConfig;

    List<DateAndPosition> dates = new List<DateAndPosition>();

    protected override void OnInitialized()
    {


        dates.Add(
            new DateAndPosition
            {
                Css = 10,
                Date = DateTime.Now,
                Js = 20,
                Position = 5,
                WordCount = 30
            });
        dates.Add(
            new DateAndPosition
            {
                Css = 5,
                Date = DateTime.Now.AddHours(5),
                Js = 25,
                Position = 9,
                WordCount = 40
            });
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Pie Chart"
                }
            }
        };

        foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        {
            _config.Data.Labels.Add(color);
        }

        PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
        {
            BackgroundColor = new[]
            {
            ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
            ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
            ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
            ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        }
        };

        _config.Data.Datasets.Add(dataset);

        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Line Chart"
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                Reverse = true,
                                Min = 1
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Css in %"
                            }
                        }
                    },
                    XAxes = new List<CartesianAxis>
                    {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                //Round = TimeMeasurement.Hour,
                                TooltipFormat = "MM.DD.YYYY",
                                //DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };
        LineDataset<TimePoint> lineDataSet = new LineDataset<TimePoint>()
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Css in %",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            LineTension = 1
        };

        lineDataSet.AddRange(dates.Select(i => new TimePoint(i.Date, i.Position)));

        _lineConfig.Data.Datasets.Add(lineDataSet);

    }

    public class DateAndPosition
    {
        public int Position { get; set; }
        public double Js { get; set; }
        public double Css { get; set; }
        public int WordCount { get; set; }
        public DateTime Date { get; set; }
    }
}
