
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Util

@using TestBlazorhart.Data
@inject ResultService ResultService

<Chart Config="_lineConfig"></Chart>

@code {
    private LineConfig _lineConfig;

    private LineDataset<TimePoint> _lineDataSetJs;

    [Parameter]
    public List<DateAndPosition> linkJs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await initialiseChart();

        //await ResultService.GetLinkPositions(index, null, null);
        //if (ResultService.linkPositions != null)
        //{
        //    linkCss = ResultService.linkPositions;
        //}

        _lineDataSetJs = new LineDataset<TimePoint>()
        {
            BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.White),
            BorderColor = ColorUtil.FromDrawingColor(System.Drawing.Color.Red),
            Label = "Javascript in %",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 2,
            PointBorderWidth = 2,
            SteppedLine = SteppedLine.False,
            LineTension = 0
        };


        _lineDataSetJs.AddRange(linkJs
        .Select(p => new TimePoint(p.Date, p.Js)));


        _lineConfig.Data.Datasets.Add(_lineDataSetJs);
    }

    private async Task initialiseChart()
    {
        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Amount of javascript"
                },
                Legend = new Legend
                {
                    Display = false
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    YAxes = new List<CartesianAxis>
{
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                Reverse = false,
                                Min = 0
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Javascript in %"
                            }
                        }
                    },
                    XAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Day,
                                Round = TimeMeasurement.Hour,
                                TooltipFormat = "MM.DD.YYYY",
                                //DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Date"
                            }
                        }
                    }
                },
                Hover = new Hover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };
    }
}
