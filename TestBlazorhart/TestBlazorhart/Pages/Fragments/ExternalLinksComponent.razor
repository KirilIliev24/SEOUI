@using TestBlazorhart.Data


@inject ResultService ResultService

<h3>External links</h3>


<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-12">

            <table>
                @if (noOfRows != 0)
                {
                    @for (int i = 0; i < noOfRows; i++)
                    {
                        <tr>
                            @for (int j = 0; j < 4; j++)
                            {
                                @if (@strings[i * 4 + j] != null)
                                {
                                    <td><a href="@strings[i * 4 + j]">@strings[i * 4 + j]</a></td>
                                }
                                else
                                {
                                    <td></td>
                                }
                            }
                        </tr>
                    }
                    <tr>
                        <td colspan="4" class="centerTd">
                            <b>@oneContTwo</b>
                        </td>
                    </tr> 
                    <tr>
                        <td colspan="4" class="centerTd">
                            <b>@twoContOne</b>
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <label>Select date: </label>
            <EditForm Model="@_Date">
                <InputDate @bind-Value="_Date.dateTime" class="form-control" />
            </EditForm>
        </div>
        <div class="col-md-6">
            <label>Choose second link for cross reference</label>
            <select @bind="secondLinkId">
                <option value="-1" disabled selected>--Choose--</option>
                @if (results.Count != 0)
                {
                    @foreach (Result s in results)
                    {
                        @if (s.blazorIndex == index)
                        {
                            <option value="@s.blazorIndex" disabled>@s.Link</option>
                        }
                        else
                        {
                            <option value="@s.blazorIndex">@s.Link</option>
                        }
                    }
                }
                else
                {
                    <option disabled>Waiting for keywords...</option>
                }
                <option value="-1">None</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <button @onclick="GetData" @onclick:preventDefault>Get data</button>
        </div>
    </div>
</div>
@code {
    [Parameter] public int index { get; set; } // index of the link
    public string message = "";
    List<string> strings = new List<string>();
    List<Result> results = new List<Result>();
    int noOfRows; // no of rows needed to dosplay all externl links
    public int secondLinkId;

    string oneContTwo = "";
    string twoContOne = "";

    TimeSelected _Date { get; set; } = new TimeSelected();

    protected async override Task OnInitializedAsync()
    {
        results = await Task.Run(() => ResultService.results);
    }

    public async Task GetData()
    {
        var newTime = new DateTime(_Date.dateTime.Year, _Date.dateTime.Month, _Date.dateTime.Day, 0, 0, 0);
        await ResultService.GetLinksFromUrl(index, secondLinkId ,newTime);
        strings = ResultService.resultsFromCraler;

        if (secondLinkId != -1)
        {
            twoContOne = strings.Last();
            strings.RemoveAt(strings.Count - 1);

            oneContTwo = strings.Last();
            strings.RemoveAt(strings.Count - 1);
        }

        noOfRows = (int)Math.Ceiling((decimal)((strings.Count() * 1.0) / 4.0));

        for (int i = strings.Count(); i < noOfRows * 4; i++)
        {
            strings.Add("");
        }
        strings.ToArray();

    }

    public class TimeSelected
    {
        public DateTime dateTime { get; set; } = DateTime.Now;
    }
}
<style>

    table {
        margin: auto;
        width: 50% !important;
    }

    td {
        max-width: 300px;
    }

    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
    }

    h3 {
        text-align: center
    }
    select {
        width: inherit;
        height: 35px;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    option {
        width: 100px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .centerTd {
        text-align: center;
    }
</style>