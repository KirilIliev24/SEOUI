@page "/fetchdata"

@using TestBlazorhart.Data
@using TestBlazorhart.Pages.Fragments
@inject ResultService ResultService


<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <h1>Search result page</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @if (chooseDate == true)
                {
                    <label>Choose a keyword: @keyword</label>
                    <br />
                    <select id="fullWight" @bind="keyword">
                        <option value="" disabled selected>--Choose--</option>
                        @if (keywords.Count != 0)
                        {
                            @foreach (string s in keywords)
                            {
                                <option value="@s">@s</option>
                            }
                        }
                        else
                        {
                            <option disabled>Waiting for keywords...</option>
                        }
                    </select>
                }
                else
                {
                    <label>Choose a keyword: @keyword</label>
                    <br />
                    <select @bind="keyword">
                        <option value="" disabled selected>--Choose--</option>
                        @if (keywords.Count != 0)
                        {
                            @foreach (string s in keywords)
                            {
                                <option value="@s">@s</option>
                            }
                        }
                        else
                        {
                            <option disabled>Waiting for keywords...</option>
                        }
                    </select>
                    <button class="links myButton" @onclick="GetLinks">Get all links</button>
                }
            </div>
            <div class="col-md-6">
                <label>Add a keyword</label>
                <br />
                <input type="text" @bind="addKeyword" />
                <button class="myButton" @onclick="AddKeyWord">Add keyword</button>
            </div>
        </div>
    </div>
    @if (chooseDate)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-2">
                    <label>Start date: </label>
                    <br />
                    <EditForm Model="@_startDate">
                        <InputDate @bind-Value="_startDate.dateTime" class="datePicker form-control" />
                    </EditForm>
                </div>
                <div class="col-md-2">
                    <label>End date: </label>
                    <br />
                    <EditForm Model="@_endDate">
                        <InputDate @bind-Value="_endDate.dateTime" class="form-control" />
                    </EditForm>
                </div>
            </div>
        </div>
    }
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6">

                @if (chooseDate == false)
                {
                    <button class="myButton" @onclick="showDatePicker">Pick date range<i class="arrow down"></i></button>
                }
                else
                {
                    <button class="myButton" id="datePickButton" @onclick="showDatePicker">Pick date range<i class="arrow up"></i></button>
                    <button class="myButton" @onclick="GetLinks">Get links</button>
                }
            </div>
        </div>
    </div>


    <div class="container-fluid">
        @if (loading == true)
        {
            <div class="row">
                <div class="col-md-12 spinDiv">
                    <div class="spinner-border"></div>
                </div>
            </div>
        }
        else
        {
            @foreach (var result in results)
            {
                <div class="row">
                    <div class="col-md-12 resultComp">
                        <TestBlazorhart.Pages.Fragments.ResultComponent result="@result"></TestBlazorhart.Pages.Fragments.ResultComponent>
                    </div>
                </div>
            }
        }
    </div>


</body>



@code {
    private Result[] results;
    private List<string> keywords = new List<string>();
    private string addKeyword;
    private string keyword = "";
    private bool chooseDate { get; set; } = false;
    private bool loading { get; set; } = false;

    TimeSelected _startDate { get; set; } = new TimeSelected();
    TimeSelected _endDate { get; set; } = new TimeSelected();

    private async Task AddKeyWord()
    {
        await ResultService.AddKeyord(addKeyword);
        await ResultService.GetAllKeyords();
        keywords = ResultService.keywords;
    }

    private async Task GetLinks()
    {
        loading = true;
        if (chooseDate == false)
        {
            _startDate.dateTime = new DateTime(2000, 1, 1);
            _endDate.dateTime = DateTime.Now;

            await ResultService.GetResultAsync(keyword, _startDate.dateTime, _endDate.dateTime);
            loading = false;
            results = ResultService.results.ToArray();

            _startDate.dateTime = DateTime.Now;
        }
        else
        {
            await ResultService.GetResultAsync(keyword, _startDate.dateTime, _endDate.dateTime);
            loading = false;
            results = ResultService.results.ToArray();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (ResultService.results != null)
        {
            results = ResultService.results.ToArray();
        }
        try
        {
            await ResultService.GetAllKeyords();
            keywords = ResultService.keywords;
        }
        catch (Exception e)
        {

            Console.WriteLine(e.StackTrace);
        }
    }

    public void showDatePicker()
    {
        chooseDate = !chooseDate;
    }

    public class TimeSelected
    {
        public DateTime dateTime { get; set; } = DateTime.Now;
    }
}
<style>
    body {
        background-color: transparent; 
    }

   

    input {
        margin-top: 5px;
        width: 50%;
        height: 30px;
        border-radius: 28px;
    }

    select {
        margin-top: 5px;
        width: 50%;
        height: 30px;
        border-radius: 28px;
    }

        select#fullWight {
            margin-top: 5px;
            width: 75%;
            height: 30px;
        }

    option {
        border-radius: 28px;
    }

    .myButton {
        width: auto;
        min-width: 25%;
        height: 30px;
        margin-top: 5px;
        box-shadow: 3px 4px 7px 0px #718a6a;
        background: linear-gradient(90deg , #586be8 5%, #5aa1e0 100%);
        background-color: #586be8;
        border-radius: 28px;
        border: 1px solid #4e86cc;
        display: inline-block;
        cursor: pointer;
        color: #ffffff;
        font-family: Arial;
        font-size: 17px;
        text-decoration: none;
        text-shadow: 0px 0px 0px #2f6627;
    }

        .myButton:hover {
            background-color: #2c79bd;
        }

    h1 {
        text-align: center;
    }

    label {
        font-size: large;
        margin-top: 5px;
        margin-bottom: -15px;
    }

    button.links {
        margin-left: 5px;
    }

    .arrow {
        border: solid white;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
        margin-left: 10px;
    }

    .up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    .spinDiv {
        display: flex;
        justify-content: center;
    }

    .resultComp {
        margin-top: 10px;
        margin-bottom: 10px;
    }

    .form-control {
        border-radius: 28px;
    }

    #datePickButton {
        margin-right: 10px;
    }
</style>