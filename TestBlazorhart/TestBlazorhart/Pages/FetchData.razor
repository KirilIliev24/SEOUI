@page "/fetchdata"

@using TestBlazorhart.Data
@using TestBlazorhart.Pages.Fragments
@inject ResultService ResultService

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <h1>Search result page</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label>Choose a keyword: @keyword</label>
                <br />
                <select @bind="keyword">
                    <option value="" disabled selected>--Choose--</option>
                    @if (keywords.Count != 0)
                    {
                        @foreach (string s in keywords)
                        {
                            <option value="@s">@s</option>
                        }
                    }
                    else
                    {
                        <option disabled>Waiting for keywords...</option>
                    }
                </select>

                @if (chooseDate == true)
                {
                    <button @onclick="GetLinks" hidden>Get links</button>
                }
                else
                {
                    <button @onclick="GetLinks">Get all links</button>
                }



            </div>
            <div class="col-md-6">
                <label>Add a keyword</label>
                <br />
                <input type="text" @bind="addKeyword" />
                <button @onclick="AddKeyWord">Add keyword</button>
            </div>
        </div>
    </div>
    @if (chooseDate)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    <label>Start date: </label>
                    <br />
                    <EditForm Model="@_startDate">
                        <InputDate @bind-Value="_startDate.dateTime" class="form-control" />
                    </EditForm>
                </div>
                <div class="col-md-3">
                    <label>End date: </label>
                    <br />
                    <EditForm Model="@_endDate">
                        <InputDate @bind-Value="_endDate.dateTime" class="form-control" />
                    </EditForm>
                </div>
            </div>
        </div>
    }
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-6" id="datePickButton">
                @if (chooseDate == false)
                {
                    <button @onclick="showDatePicker">Pick date range<i class="arrow down"></i></button>

                }
                else
                {
                    <button @onclick="showDatePicker">Pick date range<i class="arrow up"></i></button>
                    <button @onclick="GetLinks">Get links</button>
                }
            </div>
        </div>
    </div>


    <div class="container-fluid">
        @if (loading == true)
        {
            <div class="row">
                <div class="col-md-12 spinDiv">
                    <div class="spinner-border"></div>
                </div>
            </div>
        }
        else
        {
            @foreach (var result in results)
            {
                <div class="row">
                    <div class="col-md-12 resultComp">
                        <TestBlazorhart.Pages.Fragments.ResultComponent result="@result"></TestBlazorhart.Pages.Fragments.ResultComponent>
                    </div>
                </div>
            }
        }
    </div>


</body>



@code {
    private Result[] results;
    private List<string> keywords = new List<string>();
    private string addKeyword;
    private string keyword = "";
    private bool chooseDate { get; set; } = false;
    private bool loading { get; set; } = false;

    TimeSelected _startDate { get; set; } = new TimeSelected();
    TimeSelected _endDate { get; set; } = new TimeSelected();

    private async Task AddKeyWord()
    {
        await ResultService.AddKeyord(addKeyword);
        await ResultService.GetAllKeyords();
        keywords = ResultService.keywords;
    }

    private async Task GetLinks()
    {
        loading = true;
        if (chooseDate == false)
        {
            _startDate.dateTime = new DateTime(2000, 1, 1);
            _endDate.dateTime = DateTime.Now;

            await ResultService.GetResultAsync(keyword, _startDate.dateTime, _endDate.dateTime);
            loading = false;
            results = ResultService.results.ToArray();

            _startDate.dateTime = DateTime.Now;
        }
        else
        {
            await ResultService.GetResultAsync(keyword, _startDate.dateTime, _endDate.dateTime);
            loading = false;
            results = ResultService.results.ToArray();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (ResultService.results != null)
        {
            results = ResultService.results.ToArray();
        }
        try
        {
            await ResultService.GetAllKeyords();
            keywords = ResultService.keywords;
        }
        catch (Exception e)
        {

            Console.WriteLine(e.StackTrace);
        }
    }

    public void showDatePicker()
    {
        chooseDate = !chooseDate;
    }

    public class TimeSelected
    {
        public DateTime dateTime { get; set; } = DateTime.Now;
    }
}
<style>
    body {
        background-color: #ebf4ff;
    }

    input {
        margin-top: 5px;
        width: 50%;
        height: 30px;
    }

    select {
        margin-top: 5px;
        width: 50%;
        height: 30px;
    }

    button {
        width: auto;
        min-width: 25%;
        height: 30px;
        background-color: #07428a;
        color: white;
        margin-top: 5px;
    }

    h1 {
        text-align: center;
    }

    label {
        font-size: large;
    }

    div.col-md-6 {
        display: block;
    }

    #datePickButton {
        width: inherit !important;
    }

    .arrow {
        border: solid white;
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 3px;
        margin-left: 10px;
    }

    .up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
    }

    .down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    .spinDiv {
        display: flex;
        justify-content: center;
    }

    .resultComp {
        margin-top: 10px;
        margin-bottom: 10px;
    }
</style>