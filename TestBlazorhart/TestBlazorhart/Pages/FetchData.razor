@page "/fetchdata"

@using TestBlazorhart.Data
@using TestBlazorhart.Pages.Fragments
@inject ResultService ResultService

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <h1>Search result page</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label>Choose a keyword</label>
                <br />
                <select @bind="keyword">
                    <option value="" disabled selected>--Choose--</option>
                    @if (keywords.Count != 0)
                    {
                        @foreach (string s in keywords)
                        {
                            <option value="@s">@s</option>
                        }
                    }
                    else
                    {
                        <option disabled>Waiting for keywords...</option>
                    }
                </select>
                <button @onclick="GetLinks">Get links</button>
            </div>

            @*<div class="col-md-3 align-self-end">
                    <button @onclick="GetLinks">Get links</button>
                </div>*@
            <div class="col-md-6">
                <label>Add a keyword</label>
                <br />
                <input type="text" @bind="addKeyword" />
                <button @onclick="AddKeyWord">Add keyword</button>
            </div>
            @*<div class="col-md-3 align-self-end">
                    <button @onclick="AddKeyWord">Add keyword</button>
                </div>*@
        </div>
    </div>

    @if (results != null)
    {
        @foreach (var result in results)
        {
            <TestBlazorhart.Pages.Fragments.ResultComponent result="@result"></TestBlazorhart.Pages.Fragments.ResultComponent>
        }
    }
    else
    {
        <i>Loading...</i>
    }

</body>



@code {
    private Result[] results;
    private List<string> keywords = new List<string>();
    private string addKeyword;
    private string keyword = "";

    private async Task AddKeyWord()
    {
        await ResultService.AddKeyord(addKeyword);
        await ResultService.GetAllKeyords();
        keywords = ResultService.keywords;
    }

    private async Task GetLinks()
    {
        await ResultService.GetResultAsync(keyword);
        results = ResultService.results.ToArray();
    }


    protected override async Task OnInitializedAsync()
    {
        if (ResultService.results != null)
        {
            results = ResultService.results.ToArray();
        }
        try
        {
            await ResultService.GetAllKeyords();
            keywords = ResultService.keywords;
        }
        catch (Exception e)
        {

            Console.WriteLine(e.StackTrace);
        }
    }
}
<style>
    body {
        background-color: #ebf4ff;
    }

    input {
        margin-top: 5px;
        width: 50%;
        height: 30px;
    }

    select {
        margin-top: 5px;
        width: 50%;
        height: 30px;
    }

    button {
        width: 25%;
        height: 30px;
        background-color: #07428a;
        color: white;
        margin-top: 5px;
    }

    h1 {
        text-align: center;
    }

    label {
        font-size: large;
    }

    div.col-md-6 {
        display: block;
    }
</style>